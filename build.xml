<?xml version="1.0" encoding="UTF-8"?>
<!-- 定义生成文件的project根元素，默认target为空 -->
<project name="beanTest" basedir="." default="">
<!-- 定义三个简单属性 -->
<property name="src" value="src"/>
<property name="classes" value="classes"/>
<property name="dest" value="dest"/>
<property name="lib" value="lib"/>
<property name="webapps" value="F:/Study/apache-tomcat-8.5.29/webapps"/>
<!-- 定义一组文件和路径集 -->
<path id="classpath">
<!-- pathelement:用于指定一个或多个目录。可以指定如下两个属性中的一个：path:指定一个或者多个目录（或者jar文件）,多个目录或jar文件中间以英文冒号或英文分号分开；location：指定一个目录和jar文件 -->
	<pathelement path="${classes}"/>
<!-- fileset用来定义目录位置及操作适用于该目录下的哪些子目录或文件;以下用于指定jar包路径（如果没有指定property的lib路劲则是ant安装目录下的ant） -->
	<fileset dir="${lib}">
		<include name="*.jar"/>
	</fileset>
</path>
<!-- 定义help target，用于输出该生成文件的帮助信息 -->
<!-- 每个生成目标对应一个target元素。name属性是必须的，并且该属性非常重要，当希望ant运行指定的生成目标时，就是根据该 name来确定生成目标的 -->
<target name="help" description="打印帮助信息">
	<echo>help - 打印帮助信息</echo>
	<echo>compile - 编译Java源文件</echo>
	<echo>run - 运行程序</echo>
	<echo>build - 打包JAR包</echo>
	<echo>clean - 清除所有编译生成的文件</echo>
</target>
<!-- 定义compile target，用于编译Java源文件 -->
<target name="compile" description="编译Java源文件">
	<!-- 先删除classes属性所代表的文件夹 -->
	<delete dir="${classes}"/>
	<!--创建classes属性所代表文件夹 -->
	<mkdir dir="${classes}"/>
	
	<condition property="fileexists" value="javac" else="mkdir">
		<available file="${src}"/>
	</condition>
	<mkdir dir="${src}"/>
	<!-- 增加一个copy元素>
	<copy > -->
	
	<!-- 编译Java文件，编译后的class文件放到classes属性所代表的文件夹内 -->
	<!-- javac:用于编译一个或多个Java源文件，通常需要srcdir和destdir两个属性，用于指定Java源文件的位置和编译后的class文件的保存位置 -->
	<javac destdir="${classes}" debug="true" includeantruntime="yes" deprecation="false" optimize="false" failonerror="true">
		<!-- 给编译器指定编码，防止出现：“警告：编码GBK的不可映射字符” -->
		<compilerarg line="-encoding utf-8"/>
		<!-- 指定需要编译的Java文件所在的位置 -->
		<src path="${src}"/>
		<!--指定编译Java文件所需哟啊第三方类库所在的位置 -->
		<classpath refid="classpath"/>
	</javac>
</target>
<!-- 定义run target，用于运行Java源文件，运行该target之前会先运行compile target；target内部时task -->
<target name="run" description="运行程序" depends="compile">
	<!-- 运行lee.HelloTest类，其中fork指定启动另一个JVM来执行java命令，该属性默认为false，表明使用和运行ant相同的JVM来运行java程序，这将导致随着ant工具完成，java也退出，所以需要设置为 true  -->
	<!-- Java:ant的核心task之一，用于运行某个Java类，通常需要指定classname属性，用于指需要运行哪个类 -->
	<java classname="lee.HelloTest" fork="yes" failonerror="true">
		<classpath refid="classpath"/>
		<!-- 运行Java程序时传入两个参数 -->
		<arg line="测试参数1 测试参数2"/>
	</java>
</target>
<!-- 定义build target，用于打包JAR文件，运行该target之前会先运行compile target -->
<target name="build" description="打包JAR文件" depends="compile">
	<!-- 先删除dest属性所代表的文件夹 -->
	<delete dir="${dest}"/>
	<!-- 创建dest属性所代表的文件夹 -->
	<mkdir dir="${dest}"/>
	<!-- 指定将classes属性所代表的文件夹下的所有*.classes文件都打包到app.jar文件中 -->
	<!-- jar:用于生产jar包，通常需要制定destfile属性，用于制定所创建的jar包的文件名，此外还需制定一个文件集，表明需要将哪些文件打包到jar包里 -->
	<jar destfile="${dest}/app.jar" basedir="${classes}" includes="**/*.class">
		<!-- 为jar包的清单文件添加属性 -->
		<manifest>
			<attribute name="Main-Class" value="${myManifest}"/>
		</manifest>
	</jar>
</target>
<!-- 部署web （还不可用） -->
<target name="apply" description="部署到服务器">
	<!-- 将src里面的文件复制到apache webapp对应的路径下 -->
	<copy todir="${webapps}/saasTools/WEB-INF/">
		<fileset dir="${classes}"/>
	</copy>
	<copy todir="${webapps}/saasTools/WEB-INF/classes/">
		<fileset dir="${src}">
			<include name="struts.xml"/>
		</fileset>
	</copy>
</target>
<!-- 定义clean target，用于删除所有编译生成的文件 -->
<target name="clean" description="清除所有编译生成的文件">
	<!-- 删除两个目录，目录下的文件也一起删除 -->
	<delete dir="${classes}"/>
	<delete dir="${dest}"/>
</target>
</project>
<!-- 测试 -->
<!-- textsss -->
